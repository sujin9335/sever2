package com.test.toy.user.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import com.test.toy.DBUtil;
import com.test.toy.user.model.UserDTO;

public class UserDAO {

	private Connection conn;
	private Statement stat;
	private PreparedStatement pstat;
	private ResultSet rs;
	
	public UserDAO() {
		this.conn=DBUtil.open();
	}
	
	
	public int register(UserDTO dto) {

		/*
			매개변수 유/무
		 	반환값 유/무 > 단일값, DTO, List<DTO>
		 	
		 	queryNoParamNoReturn
		 	queryParamNoReturn
		 	
		 	queryNoParamTokenReturn
		 	queryParamTokenReturn
		 	
		 	queryNoParamDTOReturn
		 	queryParamDTOReturn
		 	
		 	queryNoParamListReturn
		 	queryParamListReturn
		 	
		 
		*/
		
		
		try {

			String sql = "sql";

			stat = conn.createStatement();
			rs = stat.executeQuery(sql);

			if (rs.next()) {
				return rs.getString("column");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {

			String sql = "sql";

			pstat = conn.prepareStatement(sql);
			pstat.setString(1, value);

			rs = pstat.executeQuery();

			if (rs.next()) {
				return rs.getString("column");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		try {
			
			String sql = "sql";
			
			stat=conn.createStatement();
			rs=stat.executeQuery(sql);
			
			if(rs.next()) {
				dto dto=new dto();
				
				setter
				
				return dto
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			
			String sql = "sql";
			
			pstat=conn.prepareStatement(sql);
			pstat.setString(1, value);
			
			rs=pstat.executeQuery();
			
			List<dto> list=new ArrayList<dto>();
			
			while(rs.next()) {
				dto dto=new dto();
				
				setter
				
				list.add(dto);
				
			}
			
			return list;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		
		return 0;
		
		
		
		
		
		
	}

}
