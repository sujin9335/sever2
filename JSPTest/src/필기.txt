


Sevlet > 자바 베이스(*.java)
- 장점: 자바를 그대로 사용할 수 있다
- 단점: 클라이언트 코드를 작성하기가 불편하다. > 문자열 처리

JSP > HTML 페이지 베이스(*.jsp)
- 장점: HTML 기반 > 클라이언트 코드를 작성하기가 쉽다 + 추가 자바 코드 작성
- 단점: 자바 코드를 작성하기가 불편하다

Servlet > (개발 편의성) > JSP



JSP 구성요소

1. JSP 지시자, JSP Directive
	- <%@ %>
	- page 지시자
	- include 지시자
	- taglib 지시자

2. 스크립트 요소, Scripting Elements
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부
	
3. 액션 태그, Action Tags
	- <jsp:XXX>, <c:XXX> (XXX는 태그이름)
	- 기본 액션 태그
	- 확장 액션 태그
	- 사용자 정의 액션 태그


page 지시자
- "ex01.jsp"

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

- JSP 페이지의 항상 첫번째 라인에 위치
- 1개 이상 작성 가능
- JSP의 실행환경(JSP 컨테이너 == 톰캣)에게 현재 페이지의 정보를 알려준다.

	a. language="java"
		- JSP 페이지에서 사용할 서버 프로그래밍 언어 지정
		
	b. contentType="text/html; charset=UTF-8"
		- JSP 페이지 내뵹물에 대한 기술 > 브라우저에게 전달할 HTML 페이지
		- text/html: MINE Type > HTML 문서 > 브라우저에게 전달
		- charset=UTF-8: > HTML 문서의 인코딩 > 브라우저에게 전달
		
	c. pageEncoding="UTF-8"
		- JSP 페이지 인코딩
		
	4. import="java.util.Calendar"
		- 자바 > import 구문 동일
		- 패키지/클래스 참조
		
		
-----------------------------

include 지시자
- <%@ include file="URL" %>
- 지정된 URL > 페이지(JSP, HTML, Text등)를 현재 JSP 페이지의 일부로 사용하는 기능
- 조각 페이지

ex02에서 <%@ include file="inc/copyright.jsp" %> 부분


-------------------------------

스크립틀릿 + 익스프레션

스크립틀릿, Scriptlet
- <% %>
- HTML 페이지 영역에서(JSP) java를 사용 가능하게 영역을 제공
- <% 자바 영역 %>

익스프레션, Expression
- <%= %>
- 자바의 값(데이터)을 HTML 문서에 출력하는 역할

ex03.jsp
ex04.jsp
ex05.jsp


------------------------------------

선언부
- <%! %>
- 멤버 변수와 멤버 메소드를선언하는 영역
	<%! %>
- 일반 자바 클래스를활용하는 일이 더 많다
	예시: ex06
	<%@page import="com.test.jsp.MyMath"%>
	<% MyMath m=new MyMath(); %>

- ex06.jsp


---------------------------------------


JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도 JSP(톰캣)가 미리 만들어서 제공하는 객체
- 예약어 제공 : 사용빈도순
- request, response, session, pageContext, 
- out, application, 
- config, page, exception 등

***** request, pageContext, session, application
	- 객체 내부에 사용자(개발자) 데이터를 저장할 수 있는 컬렉션을 가지고 있다
	- Map
	- void setAttributes(String key, Object value)
	- Object getAttributes(String key)
	
	

request 객체
- HttpSevletRequest (sevlet에서 doGet()할때 쓰였음)
- 클라이언트 > (행동) > 서버

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	- "ex07.jsp > 사용자로부터 데이터를 입력 + 서버 전송
	- "ex07_ok.jsp > 데이터 수신 + 가공/처리 + 피드백
	
	총정리
	- "ex08.jsp" > 모든 입력 컨트롤 테스트(송수신)
	- "ex08_ok.jsp"

2. 클라이언트에서 서버로 전송한 데이터 인코딩 처리

3. 클라이언트에서 서버로 전송할 때의 여러가지 관련 정보 가져오기


-----------------------------------------------10_18

위에 이어서
1. 클라이언트에서 서버로 전송한 데이터를 가져오기

	- "ex09.jsp"
	- "ex09_ok.jsp"
	
2. 클라이언트에서 서버로 전송한 데이터 인코딩 처리
	- 계속 했음

3. 클라이언트에서 서버로 전송할 때의 여러가지 관련 정보 가져오기
	- "ex10_request.jsp"
	
	
----------------------------------

respone 객체
- HttpServletRespnse

1. 서버에서 클라이언트로 돌려주는 HTML 페이지 제작
	- response.getWriter() > PrintWriter > HTML 제작

2. 서버에서 클라이너트로 돌려주는 HTML 페이지 인코딩
	- response.setCharacterEncoding("UTF-8")	//서블릿
	- 페이지 지시자 > contentType="charset=UTF-8"	//JSP

3. 서버에서 클라이너트로 돌려주는 HTML 페이지 MINE 설정
	- contextType="text/html"
	- 브라우저에게 돌려주는 페이지의 형식이 HTML 페이지 입니다.. 라고 알려주는 역할

4. 페이지 이동하기
	response : response.sendRedirect(주소)
	첫번째페이지에서 response.sendRedirect(주소)를 만나도 첫번째페이지 읽고 출력해주고 
		주소창에 두번째페이지 주소를 치고 두번째페이지를 읽고 출력해준다
	- "ex11_response_1.jsp"
	- "ex11_response_2.jsp"

	
	pageContext 객체 : pageContext.forward(주소)
	첫번째페이지에서 pageContext.forward(주소)룰 만나면 하는일을 멈추고 서버내에서
		바로 두번째 페이지를 출력해준다 (그래서 출력은 두번째인데 주소는 첫번쨰)
	- "ex12_pagecontext_1.jsp"
	- "ex12_pagecontext_2.jsp"

--------------------------	
	
out 객체
- 출력 객체
- "ex13_out.jsp"


	
중요******
request, pageContext, session, application
- 내부에 데이터를 저장하는 공간이 있다.(Map)
- setAttribute(), getAttribute()



session 객체 : 개인값, 브라우저가마다 값이 다름 
- 클라이언트(브라우저)의 세션 정보(접속 ~ 종료 : 개인 정보)를 저장/관리하는 객체

	쇼핑몰 : 옛날에 장바구니데이터를 세션에 저장했었음==비용절약
	- session.setAttribute("장바구니")


웹사이트 == 웹응용프로그램 == 웹애플리케이션

application 객체 : 공용변수, 자바로치면 static, 브라우저가 달라도 값이 같음
- 애플리케이션(웹 사이트)의 전체적인 정보를 관리/조작하는 객체

- "ex14_session_application.jsp"


- "ex15_session.jsp"
- "ex15_set.jsp"
- "ex15_del.jsp"
- "ex15_interval.jsp"
- "ex15_reset.jsp"


----------------------------


파일 업로드/다운로드
- 브라우저와 웹서버간의 파일 복사
- 업로드: 클라이언트 자원 > (복사) > 서버측
- 다운로드: 서버 자원 > (복사) > 클라이언트측

파일 업로드 라이브러리
- cos library
- http://www.servlets.com

단일 파일 업로드
- "ex16.jsp"
- "ex16_ok.jsp"

다중 파일 업로드
- "ex17.jsp"
- "ex17_ok.jsp"

이미지 뷰어
- "ex18.jsp"
- "ex18_ok.jsp"
- "ex18_del.jsp"



----------------------------10-19

내장 객체 > 저장소 제공 > pageContext, request, session, application
> 왜? + 선택 기준?? > 생명 주기를 기준

- 내가 저장 + 사용할 데이터 > 어느 기간동안 사용하는지?
- 내장 객체 > 어느 기간동안 객체가 유지 > 생명 주기

- "ex19_scope_1.jsp": 데이터 입력 페이지
- "ex19_scope_2.jsp": 데이터 수신 + 처리 페이지


이동방식을 pageContext.forward() 로바꾸니 request에서 (4.)data값이 받아짐


------

Expression
<% %>


EL + JSTL
- 구문 단순 + 가독성 향상
- JSP 페이지에서 되도록 자바를 쓰지 말자!!

EL 언어(Expression Language) : <% %>와는 다름
- <%= %> 기능을 대신하기 위해서 만들어진 언어 > 가동석 향상
- "ex20_el.jsp"



-------

JSTL
- 액션 태그
- JSP Standard Tag Library, 표준 태그 라이브러리 > 확장 태그
- 자바의 프로그래밍 기능 > 태그로 구현(표현)
- "ex21_jstl.jsp"




-------

웹페이지 기술(Basic) + 데이터 베이스

새프로젝트
- new > 자바 프로젝트 > "JDBCTest"








	
